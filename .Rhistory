EAD_PROD2 = sapply(delim, function(x) x[8]),
CORR_PROD2 = sapply(delim, function(x) x[9]))
names(TBLI1)<-c("NUM_ID","TETA","PD_PROD1","LGD_PROD1","EAD_PROD1","CORR_PROD1","PD_PROD2","LGD_PROD2","EAD_PROD2","CORR_PROD2")
LAYOUTCOP<<-TBLI1[c("NUM_ID","TETA","PD_PROD1","LGD_PROD1","EAD_PROD1","CORR_PROD1","PD_PROD2","LGD_PROD2","EAD_PROD2","CORR_PROD2")]
FIN<<-nrow(LAYOUTCOP)
for (k in 1:FIN)
{
CTE_V<<-as.numeric(as.character(LAYOUTCOP$NUM_ID[k]))
TETA_V<<-round(as.numeric(as.character(LAYOUTCOP$TETA[k])))
PD1_V<<-as.numeric(as.character(LAYOUTCOP$PD_PROD1[k]))
EAD1_V<<-as.numeric(as.character(LAYOUTCOP$EAD_PROD1[k]))
CORR1_V<<-as.numeric(as.character(LAYOUTCOP$CORR_PROD1[k]))
PD2_V<<-as.numeric(as.character(LAYOUTCOP$PD_PROD2[k]))
EAD2_V<<-as.numeric(as.character(LAYOUTCOP$EAD_PROD2[k]))
CORR2_V<<-as.numeric(as.character(LAYOUTCOP$CORR_PROD2[k]))
IND_OBJ_V<<-round(((pnorm((1-as.numeric(as.character(LAYOUTCOP$CORR_PROD1[k])))**(-0.5)*qnorm(as.numeric(as.character(LAYOUTCOP$PD_PROD1[k])))+(as.numeric(as.character(LAYOUTCOP$CORR_PROD1[k]))/(1-as.numeric(as.character(LAYOUTCOP$CORR_PROD1[k]))))**(0.5)*qnorm(0.9))*as.numeric(as.character(LAYOUTCOP$EAD_PROD1[k]))+pnorm((1-as.numeric(as.character(LAYOUTCOP$CORR_PROD2[k])))**(-0.5)*qnorm(as.numeric(as.character(LAYOUTCOP$PD_PROD2[k])))+(as.numeric(as.character(LAYOUTCOP$CORR_PROD2[k]))/(1-as.numeric(as.character(LAYOUTCOP$CORR_PROD2[k]))))**(0.5)*qnorm(0.9))*as.numeric(as.character(LAYOUTCOP$EAD_PROD2[k])))/(as.numeric(as.character(LAYOUTCOP$EAD_PROD1[k]))+as.numeric(as.character(LAYOUTCOP$EAD_PROD2[k]))))/IC1,NUM)*IC1
P_LOSS_V<<-P_LOSS
L2<<-0.0003
UNIV1<<-data.frame(P_LOSS=P_LOSS_V,
L2,
FDP1=sqrt((1-CORR1_V)/CORR1_V)*exp(-((1/(2*CORR1_V))*((sqrt(1-CORR1_V)*qnorm(L2))-qnorm(PD1_V))**2)+(1/2)*qnorm(L2)**2)/(1/IC),
FDA1=pnorm((sqrt(1-CORR1_V)*qnorm(L2)-qnorm(PD1_V))/sqrt(CORR1_V)),
FDP2=sqrt((1-CORR2_V)/CORR2_V)*exp(-((1/(2*CORR2_V))*((sqrt(1-CORR2_V)*qnorm(L2))-qnorm(PD2_V))**2)+(1/2)*qnorm(L2)**2)/(1/IC),
FDA2=pnorm((sqrt(1-CORR2_V)*qnorm(L2)-qnorm(PD2_V))/sqrt(CORR2_V))
)
k_p_loss<<-P_LOSS
#Repeat loop starts;
repeat
{
k_p_loss<<-round(k_p_loss+IC,7)
L2<<-max(.0003,(k_p_loss*(EAD1_V+EAD2_V)-EAD1_V)/EAD2_V)
FDP1<<-sqrt((1-CORR1_V)/CORR1_V)*exp(-((1/(2*CORR1_V))*((sqrt(1-CORR1_V)*qnorm(k_p_loss))-qnorm(PD1_V))**2)+(1/2)*qnorm(k_p_loss)**2)/(1/IC)
FDA1<<-pnorm((sqrt(1-CORR1_V)*qnorm(k_p_loss)-qnorm(PD1_V))/sqrt(CORR1_V))
FDP2<<-sqrt((1-CORR2_V)/CORR2_V)*exp(-((1/(2*CORR2_V))*((sqrt(1-CORR2_V)*qnorm(k_p_loss))-qnorm(PD2_V))**2)+(1/2)*qnorm(k_p_loss)**2)/(1/IC)
FDA2<<-pnorm((sqrt(1-CORR2_V)*qnorm(k_p_loss)-qnorm(PD2_V))/sqrt(CORR2_V))
new_row<<-c(k_p_loss,L2,FDP1,FDA1,FDP2,FDA2)
UNIV1<<-rbind(UNIV1,new_row)
if(k_p_loss>=(1-IC))
{
break;
}
}
TOT<<-nrow(UNIV1)
LII<<-array(NA,dim=c(TOT,TOT))
LI<<-array(NA,dim=c(TOT,TOT))
for (i in 1:TOT)
{
tab_UNIV1<<-UNIV1[i,]
for(j in 1:TOT)
{
if(j==1)
{
if(!is.na(tab_UNIV1$L2))
{
LII[i,j] <<-tab_UNIV1$L2
LI[i,j]<<-max((tab_UNIV1$P_LOSS*(EAD1_V+EAD2_V)-EAD2_V*LII[i,j])/EAD1_V,0.003)
}
if(!is.na((tab_UNIV1$L2+IC)<=tab_UNIV1$P_LOSS))
{
LII[i,j]<<-tab_UNIV1$L2
}
if(is.na((tab_UNIV1$L2+IC)<=tab_UNIV1$P_LOSS))
{
LII[i,j] <<- NA;
}
}
else
{
if(is.na(LII[i,j-1]))
{
LII[i,j]<<-NA;
LI[i,j]<<-NA;
}
else if((LII[i,j-1]+IC)<=tab_UNIV1$P_LOSS)
{
LII[i,j]<<-min(LII[i,j-1]+IC,tab_UNIV1$P_LOSS*(EAD1_V+EAD2_V)/EAD2_V)
LI[i,j]<<-((tab_UNIV1$P_LOSS*(EAD1_V+EAD2_V)-EAD2_V*LII[i,j])/EAD1_V)
}
}
}
}
CFL <<- (round(LI/IC1,NUM)*IC1)
FDA2_arr<<-UNIV1$FDA2
UNIV2_1<<-UNIV1[c("P_LOSS","FDA1","FDA2")]
FLIVSFLII<<-array(NA,dim=c(TOT,TOT))
for (n in 1:TOT)
{
A2<-TETA_V
B2<-UNIV2_1$FDA1[n]
C2<-FDA2_arr
FLIVSFLII_1<-(1/2/(A2-1))*(A2-1-1/2*((1/sqrt(((1+(A2-1)*(B2+C2))**2)-4*(A2-1)*A2*B2*C2)))*(2*(1+(A2-1)*(B2+C2))*(A2-1)-4*(A2-1)*A2*B2))
FLIVSFLII[n,]<<-floor(FLIVSFLII_1*E)/E
}
LIIP <<- (round(LII/IC1,NUM)*IC1)
FDP2_mat <- round(as.matrix(UNIV1$FDP2),NUM)
for(i in 1:TOT)
{
for(j in 1:TOT)
{
if(!is.na(LIIP[i,j]) && (((LIIP[i,j]*E) %% (IC*E)) == 0) && (LIIP[i,j] >= 0) && (LIIP[i,j]<= 1) && (((LIIP[i,j] %/% IC)+1)<=TOT))
{
s1<- round((LIIP[i,j] / IC),0)
LIIP[i,j] <<- FDP2_mat[s1+1]
}
else
LIIP[i,j] <<- 0
}
}
for(i in 1:TOT)
{
for(j in 1:TOT)
{
if(!is.na(CFL[i,j]) && (((CFL[i,j]*E) %% (IC*E)) == 0) && (CFL[i,j] >= 0) && (CFL[i,j]<= 1) && (((CFL[i,j]/IC)+1)<=TOT))
{
t1<<-round((CFL[i,j] / IC)+1,0)
CFL[i,j] <<- FLIVSFLII[t1,j]
}
else
CFL[i,j] <<- 1
}
}
MUL<<-array(NA,dim=c(TOT,TOT))
FL2FL1_DEP<<-array(NA,dim=c(TOT,1))
for (j in 1:TOT)
{
MUL[,j]<<-LIIP[,j]*CFL[,j]
}
MUL<<-ifelse(is.na(MUL),0,MUL)
for (i in 1:TOT)
{
FL2FL1_DEP[i,1]<<-sum(MUL[i,])
}
UNIV6<<-cbind(UNIV1[c("P_LOSS")],FL2FL1_DEP)
UNIV7_1<<-subset(UNIV6,floor(FL2FL1_DEP*100) %in% c(90,91,92,93))
if(nrow(UNIV7_1) > 0)
{
UNIV7<<-cbind(UNIV7_1,NUM_ID=CTE_V)
F_CAL_COP<<-rbind(F_CAL_COP,UNIV7)
}
#End of k in 1:TOT
}
if(nrow(F_CAL_COP)>0)
{
F_CAL_COP<<-F_CAL_COP[order(F_CAL_COP[,3],F_CAL_COP[,1]),]
F_CAL_COP<<-subset(F_CAL_COP,!duplicated(F_CAL_COP[,3]))
row.names(F_CAL_COP)<<-NULL
}
#UNIV_TEMP <<- cbind(TBLI1$NUM_ID,F_CAL_COP)
UNIV_TEMP <<- cbind(F_CAL_COP)
keyval(1,UNIV_TEMP)
}
out1 <- from.dfs(mapreduce(input = "/user/jimit/dataCoupla.csv" ,input.format = "text",map = copula.map,reduce=function(k, vv) keyval(k, vv)))
out1
cars <- c(1, 3, 6, 4, 9)
plot(cars)
plot(cars, type="o", col="blue")
title(main="Autos", col.main="red", font.main=4)
plot(1, 1, xlim=c(1,5.5), ylim=c(0,7), type="n", ann=FALSE)
text(1:5, rep(6,5), labels=c(0:4), cex=1:5, col=1:5)
points(1:5, rep(5,5), cex=1:5, col=1:5, pch=0:4)
text((1:5)+0.4, rep(5,5), cex=0.6, (0:4))
install.packages("Lock5Data")
install.packages
(
"ggplot2"
)
install.packages("ggplot2")
library(Lock5Data)
data(SleepStudy)
heart = read.table("heart-rate",header = TRUE)
heart <- read.table("heart-rate",header = TRUE)
GPA <- read.table("GPA",header = TRUE)
GETWD()
getwd()
require(ggplot2)
ggplot(students, aes (x = Level)) + geom_bar()
heart = read.table(file.choose(),header = TRUE)
View(heart)
heart
ggplot(SleepStudy, aes(x=Drinks,y=GPA)) + geom_point() + ylab('number of alcoholic drinks per week')
with(SleepStudy, cor(Drinks, GPA))
set.seed(1)
d <- data.frame(year = rep(2000:2002, each = 3), + count = round(runif(9,0,20)))
d <- data.frame(year = rep(2000:2002, each = 3), count = round(runif(9,0,20)))
print(d)
d <- data.frame(year = rep(2000:2002, each = 1), count = round(runif(9,0,20)))
d
d <- data.frame(year = rep(2000:2002, each = 2), count = round(runif(9,0,20)))
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
View(train)
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
View(train)
View(test)
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
knn(train, test, cl, k = 3, prob=TRUE)
library(knn)
require(kknn)
library(knn)
install.packages(class)
library("class", lib.loc="/usr/lib/R/library")
knn(train, test, cl, k = 3, prob=TRUE)
attributes(.Last.value)
summary(knn(train, test, cl, k = 3, prob=TRUE))
x = c(1,2,3,4)
class(x)
fix(x)
x^2
classifier<-naiveBayes(iris[,1:4], iris[,5])
library(e1071)
install.packages("e1071")
classifier<-naiveBayes(iris[,1:4], iris[,5])
library(e1071)
classifier<-naiveBayes(iris[,1:4], iris[,5])
table(predict(classifier, iris[,-5]), iris[,5], dnn=list('predicted','actual'))
classifier$apriori
classifier$tables$Petal.Length
getwd()
if (!file.exists("Coursera"))
{dir.create("data")}
setwd("/home/jimit/Coursera")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,destfile="/home/jimit/Coursera")
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file(fileURL,destfile="/home/jimit")
download.file(fileURL, destfile = "/home/jimit/Coursera", method = "curl")
fileURL
download.file(fileURL, destfile = "/home/jimit/Coursera/dataQ1.csv", method = "curl")
download.file(fileURL, destfile = "/home/jimit/Coursera/dataQ1.csv")
list.files("/home/jimit/Coursera")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv?accessType=DOWNLOAD"
download.file(fileURL, destfile = "/home/jimit/Coursera/dataQ1.csv")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile = "/home/jimit/Coursera/dataQ1.csv")
download.file(fileUrl, destfile = "/home/jimit/Coursera/dataQ1.csv", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "dataQ1")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "dataQ1", method = "curl")
library(RCurl)
install.packages("RCurl")
library(RCurl)
install.packages("RCurl")
apt-get -y install libcurl4-gnutls-dev
install.packages("RCurl")
library("RCurl", lib.loc="~/R/i686-pc-linux-gnu-library/3.0")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "/home/jimit/dataQ1.csv", method = "curl")
library(RCurl)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "/home/jimit/dataQ1.csv", method = "curl")
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
read.csv(file)
download.file(filrUrl, destfile = "/home/jimit/dataQ1.csv", method = "curl")
fileUrl
download.file(filrURL, destfile = "/home/jimit/dataQ1.csv", method = "curl")
download.file(fileURL, destfile = "/home/jimit/dataQ1.csv", method = "curl")
setwd("home/jimit/Coursera")
setwd("home/jimit/Coursera/")
x <- getURL(URL)
x <- getURL(fileURL)
out <- read.csv(textConnection(x))
View(out)
head(val)
head(out(val)
)
data <- read.table("./dataQ1.csv", sep = ",", header = TRUE)
sum(!is.na(microData$VAL[microData$VAL==24]))
sum(!is.na(data$VAL[data$VAL==24]))
data$FES
library("xlsx")
install.package("xlsx")
install.packages("xlsx")
library("xlsx", lib.loc="~/R/i686-pc-linux-gnu-library/3.0")
library(xlsx)
colIndex <- 7:15
rowIndex <- 18:23
data3 <- read.xlsx("./dataQ3.xlsx", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
sum(data3$Zip*data3$Ext,na.rm=T)
install.packages("xml")
install.packages("XML")
library(XML)
library(XML)
fileUrl4 <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
data4 <- xmlTreeParse(fileUrl4, useInternal=TRUE)
rootNode <- xmlRoot(data4)
sum(xpathSApply(rootNode, "//zipcode", xmlValue)==21231)
fileUrl5 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl5, destfile="./data5.csv", method="curl")
data5 <- read.table("./dataQ5.csv", sep = ",", header = TRUE)
DT <- fread("./data5.csv")
DT <- fread("./dataQ5.csv")
file.info("./data5.csv")$size
file.info("data5")$size
system.time(data5[,mean(pwgtp15),by=SEX])
install.packages("httr")
library(httr)
install.packages("sqldf")
hurl <- (" http://biostat.jhsph.edu/~jleek/contact.html ")
hurl <- (" http://biostat.jhsph.edu/~jleek/contact.html")
con <- url(hurl)
hurl <- ("http://biostat.jhsph.edu/~jleek/contact.html")
con <- url(hurl)
htmlCode <- readLines(con)
close(con)
sapply(htmlCode[c(10, 20, 30, 100)], nchar)
getwd()
data <- read.csv("./getdata-wksst8110.for", header = TRUE)
data <- read.csv("/home/jimit/Downloads/getdata-wksst8110.for", header = TRUE)
data <- read.csv("/home/jimit/Downloads/getdata-wksst8110.for", header = TRUE)
data <- read.csv("/home/jimit/getdata-wksst8110.for", header = TRUE)
data <- read.csv("./getdata-wksst8110.for", header = TRUE)
f <- file.choose()
data <- read.csv(f)
df <- read.fwf(file="getdata_wksst8110.for",widths=c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4), skip=4)
sum(df[,4])
sum(df[2,4])
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
file <- file.path(getwd(), "ss06hid.csv")
file
download.file(url, file, method = "curl")
data <- data.table(read.csv(file))
get
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
file <- file.path(getwd(), "ss06hid.csv")
download.file(url, file, method = "curl")
dt <- data.table(read.csv(file))
library("data.table", lib.loc="~/R/i686-pc-linux-gnu-library/3.0")
dt <- data.table(read.csv(file))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
file <- file.path(getwd(), "GDP.csv")
dtGDP <- data.table(read.csv(file, skip = 4, nrows = 215, stringsAsFactors = FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
mean(gdp, na.rm = TRUE)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
file <- file.path(getwd(), "EDSTATS_Country.csv")
dtEd <- data.table(read.csv(file))
dt <- merge(dtGDP, dtEd, all = TRUE, by = c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
getwd()
source('~/Documents/R/plot1.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
data <- subset(full_data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(full_data)
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Red")
dev.copy(png, file="plot1.png", height=480, width=480)
dev.off()
hist(data$Global_active_power, main="Global Active Power",
xlab="Global Active Power (kilowatts)", ylab="Frequency", col="Blue")
plot(data$Global_active_power~data$Datetime, type="l",ylab="Global Active Power (kilowatts)", xlab="")
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
with(data,
{
plot(Sub_metering_1~Datetime, type="l",ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=1,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot2.png", height=480, width=480)
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
dev.off()
with(data,
{
plot(Sub_metering_1~Datetime, type="l",ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
with(data,
{
plot(Sub_metering_1~Datetime, type="l",ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
View(data)
plot(Sub_metering_1~Datetime, type="l",ylab="Global Active Power (kilowatts)", xlab="")
with(data,
{
plot(Sub_metering_1~Datetime, type="l",ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(data, {
plot(Global_active_power~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
plot(Voltage~Datetime, type="l",
ylab="Voltage (volt)", xlab="")
plot(Sub_metering_1~Datetime, type="l",
ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~Datetime, type="l",
ylab="Global Rective Power (kilowatts)",xlab="")
})
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
View(data)
full_data <- read.csv("/home/jimit/household_power_consumption.txt", header=T, sep=';', na.strings="?",
nrows=2075259, check.names=F, stringsAsFactors=F, comment.char="", quote='\"')
full_data$Date <- as.Date(full_data$Date, format="%d/%m/%Y")
data <- subset(full_data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
rm(full_data)
datetime <- paste(as.Date(data$Date), data$Time)
data$Datetime <- as.POSIXct(datetime)
with(data,
{
plot(Sub_metering_1~Datetime, type="l",ylab="Global Active Power (kilowatts)", xlab="")
lines(Sub_metering_2~Datetime,col='Red')
lines(Sub_metering_3~Datetime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2,
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
getwd()
NEI <- readRDS("data/summarySCC_PM25.rds")
SCC <- readRDS("data/Source_Classification_Code.rds")
NEI <- readRDS("/home/jimit/summarySCC_PM25.rds")
SCC <- readRDS("/home/jimit/Source_Classification_Code.rds")
NEI <- readRDS("/home/jimit/summarySCC_PM25.rds")
SCC <- readRDS("/home/jimit/Source_Classification_Code.rds")
NEIsample <- NEI[sample(nrow(NEI), size = 1000, replace = F), ]
NEIsample <- NEI[sample(nrow(NEI), size = 1000, replace = F), ]
NEIsample
Emissions <- aggregate(NEI[, 'Emissions'], by = list(NEI$year), FUN = sum)
Emissions$PM <- round(Emissions[, 2] / 1000, 2)
png(filename = "plot1.png")
barplot(Emissions$PM, names.arg = Emissions$Group.1, main = expression('Total Emission of PM'[2.5]), xlab = 'Year', ylab = expression(paste('PM', ''[2.5], ' in Kilotons')))
dev.off()
MD <- subset(NEI, fips == '24510')
png(filename = 'plot2.png')
barplot(tapply(X = MD$Emissions, INDEX = MD$year, FUN = sum), main = 'Total Emission in Baltimore City, MD', xlab = 'Year', ylab = expression('PM'[2.5]))
dev.off()
MD$year <- factor(MD$year, levels = c('1999', '2002', '2005', '2008'))
png('plot3.png', width = 800, height = 500, units = 'px')
ggplot(data = MD, aes(x = year, y = log(Emissions))) + facet_grid(. ~ type) + guides(fill = F) + geom_boxplot(aes(fill = type)) + stat_boxplot(geom = 'errorbar') + ylab(expression(paste('Log', ' of PM'[2.5], ' Emissions'))) + xlab('Year') + ggtitle('Emissions per Type in Baltimore City, Maryland') + geom_jitter(alpha = 0.10)
library("ggplot2", lib.loc="~/R/i686-pc-linux-gnu-library/3.0")
ggplot(data = MD, aes(x = year, y = log(Emissions))) + facet_grid(. ~ type) + guides(fill = F) + geom_boxplot(aes(fill = type)) + stat_boxplot(geom = 'errorbar') + ylab(expression(paste('Log', ' of PM'[2.5], ' Emissions'))) + xlab('Year') + ggtitle('Emissions per Type in Baltimore City, Maryland') + geom_jitter(alpha = 0.10)
dev.off()
SCC.coal = SCC[grepl("coal", SCC$Short.Name, ignore.case = TRUE), ]
merge <- merge(x = NEI, y = SCC.coal, by = 'SCC')
merge.sum <- aggregate(merge[, 'Emissions'], by = list(merge$year), sum)
View(merge.sum)
colnames(merge.sum) <- c('Year', 'Emissions')
png(filename = 'plot4.png')
ggplot(data = merge.sum, aes(x = Year, y = Emissions / 1000)) + geom_line(aes(group = 1, col = Emissions)) + geom_point(aes(size = 2, col = Emissions)) + ggtitle(expression('Total Emissions of PM'[2.5])) + ylab(expression(paste('PM', ''[2.5], ' in kilotons'))) + geom_text(aes(label = round(Emissions / 1000, digits = 2), size = 2, hjust = 1.5, vjust = 1.5)) + theme(legend.position = 'none') + scale_colour_gradient(low = 'black', high = 'red')
ggplot(data = merge.sum, aes(x = Year, y = Emissions / 1000)) + geom_line(aes(group = 1, col = Emissions)) + geom_point(aes(size = 2, col = Emissions)) + ggtitle(expression('Total Emissions of PM'[2.5])) + ylab(expression(paste('PM', ''[2.5], ' in kilotons'))) + geom_text(aes(label = round(Emissions / 1000, digits = 2), size = 2, hjust = 1.5, vjust = 1.5)) + theme(legend.position = 'none') + scale_colour_gradient(low = 'black', high = 'red')
dev.off()
NEI$year <- factor(NEI$year, levels = c('1999', '2002', '2005', '2008'))
MD.onroad <- subset(NEI, fips == 24510 & type == 'ON-ROAD')
MD.df <- aggregate(MD.onroad[, 'Emissions'], by = list(MD.onroad$year), sum)
colnames(MD.df) <- c('year', 'Emissions')
png('plot5.png')
ggplot(data = MD.df, aes(x = year, y = Emissions)) + geom_bar(aes(fill = year), stat = "identity") + guides(fill = F) + ggtitle('Total Emissions of Motor Vehicle Sources in Baltimore City, Maryland') + ylab(expression('PM'[2.5])) + xlab('Year') + theme(legend.position = 'none') + geom_text(aes(label = round(Emissions, 0), size = 1, hjust = 0.5, vjust = 2))
dev.off()
MD.onroad <- subset(NEI, fips == '24510' & type == 'ON-ROAD')
CA.onroad <- subset(NEI, fips == '06037' & type == 'ON-ROAD')
MD.DF <- aggregate(MD.onroad[, 'Emissions'], by = list(MD.onroad$year), sum)
colnames(MD.DF) <- c('year', 'Emissions')
MD.DF$City <- paste(rep('MD', 4))
CA.DF <- aggregate(CA.onroad[, 'Emissions'], by = list(CA.onroad$year), sum)
colnames(CA.DF) <- c('year', 'Emissions')
CA.DF$City <- paste(rep('CA', 4))
DF <- as.data.frame(rbind(MD.DF, CA.DF))
png('plot6.png')
ggplot(data = DF, aes(x = year, y = Emissions)) + geom_bar(aes(fill = year),stat = "identity") + guides(fill = F) + ggtitle('Total Emissions of Motor Vehicle Sources\nLos Angeles County, California vs. Baltimore City, Maryland') + ylab(expression('PM'[2.5])) + xlab('Year') + theme(legend.position = 'none') + facet_grid(. ~ City) + geom_text(aes(label = round(Emissions, 0), size = 1, hjust = 0.5, vjust = -1))
dev.off()
getwd()
setwd("/home/jimit//Documents/R/RRProject1")
getwd()
unzip('activity.zip')
unzip('activity.zip')
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
setwd("/Documents/R/RRProject1/RepData_PeerAssessment1")
setwd("/home/jimit/Documents/R/RRProject1/RepData_PeerAssessment1")
if(!file.exists('activity.csv')){
unzip('activity.zip')
}
activityData <- read.csv('activity.csv')
#activityData$interval <- strptime(gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", activityData$interval), format='%H:%M')
stepsByDay <- tapply(activityData$steps, activityData$date, sum, na.rm=TRUE)
stepsByDay
